import numpy as np

def generate_large_block_pgm_maze(width=25, height=25, block_size=2, wall_density=0.2, filename="large_block_maze.pgm"):
    """
    Generates a PGM maze with larger obstacle blocks, ensuring spacing between them.
    
    Args:
        width (int): Width of the maze.
        height (int): Height of the maze.
        block_size (int): Size of each obstacle block (e.g., 3x3, 4x4, etc.).
        wall_density (float): Probability of placing a block (0 to 1).
        filename (str): Output filename for the PGM maze.
    """
    maze = np.ones((height, width), dtype=np.uint8) * 255  # Start with an empty grid (free space)

    # Place large obstacles in non-overlapping blocks
    for y in range(1, height - block_size, block_size + 3):  # Step by block_size + spacing
        for x in range(1, width - block_size, block_size + 3):
            if np.random.rand() < wall_density:  # Randomly decide to place an obstacle
                maze[y:y+block_size, x:x+block_size] = 0  # Fill in a large block

    # Ensure start (top-left) and goal (bottom-right) are free
    maze[0:2, 0:2] = 255  # Start position clear
    maze[-2:, -2:] = 255  # Goal position clear

    # Save as PGM file
    with open(filename, "wb") as f:
        f.write(f"P5 {width} {height} 255\n".encode())
        f.write(maze.tobytes())

    print(f"Generated large block maze saved as {filename}")

# Example: Create a maze with 4x4 obstacles, spaced out
generate_large_block_pgm_maze(width=25, height=25, block_size=5, wall_density=0.5, filename="spaced_maze.pgm")
